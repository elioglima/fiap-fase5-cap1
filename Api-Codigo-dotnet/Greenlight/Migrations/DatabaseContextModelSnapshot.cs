// <auto-generated />
using System;
using Greenlight.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Greenlight.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Greenlight.Entitys.Anuncio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssociacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssociacaoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Anuncio");
                });

            modelBuilder.Entity("Greenlight.Entitys.Associacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_File_Associacao")
                        .IsUnique();

                    b.ToTable("Associacao");
                });

            modelBuilder.Entity("Greenlight.Entitys.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("email");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR(1000)")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_File_Cliente")
                        .IsUnique();

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Greenlight.Entitys.Concessionaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Concessionaria");
                });

            modelBuilder.Entity("Greenlight.Entitys.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("NVARCHAR(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("CodigoInstalacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("codigo_instalacao");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("complemento");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("estado");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("logradouro");

                    b.Property<int?>("Numero")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("pais");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("NVARCHAR(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex(new[] { "Id" }, "IX_File_Endereco")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("Greenlight.Entitys.Energia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConcessionariaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataEntrada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataValidade")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("EnergiaStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<float?>("Preco")
                        .HasColumnType("float");

                    b.Property<float?>("Saldo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConcessionariaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("EnergiaStatusId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Energia");
                });

            modelBuilder.Entity("Greenlight.Entitys.EnergiaStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EnergiaStatus");
                });

            modelBuilder.Entity("Greenlight.Entitys.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociacaoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPessoaId")
                        .HasColumnType("int")
                        .HasColumnName("tipopessoa");

                    b.HasKey("Id");

                    b.HasIndex("AssociacaoId");

                    b.HasIndex(new[] { "Id" }, "IX_File_Pessoa")
                        .IsUnique();

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.PessoaFisica", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataNascimento")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("nome");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("rg");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_File_PessoaFisica")
                        .IsUnique();

                    b.ToTable("PessoaFisica");
                });

            modelBuilder.Entity("Greenlight.Entitys.PessoaJuridica", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataAbertura")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IE")
                        .HasColumnType("longtext");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PessoaJuridica");
                });

            modelBuilder.Entity("Greenlight.Entitys.TipoTransacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoTransacao");
                });

            modelBuilder.Entity("Greenlight.Entitys.Transacoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssociacaoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataEntrada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataValidade")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EnergiaId")
                        .HasColumnType("int");

                    b.Property<string>("IdentificacaoConclusao")
                        .HasColumnType("longtext");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<float?>("Preco")
                        .HasColumnType("float");

                    b.Property<float?>("Saldo")
                        .HasColumnType("float");

                    b.Property<int>("TipoTransacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociacaoId");

                    b.HasIndex("EnergiaId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("TipoTransacaoId");

                    b.ToTable("Transacoes");
                });

            modelBuilder.Entity("Greenlight.Entitys.Anuncio", b =>
                {
                    b.HasOne("Greenlight.Entitys.Associacao", "Associacao")
                        .WithMany("Anuncios")
                        .HasForeignKey("AssociacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithMany("Anuncios")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associacao");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.Cliente", b =>
                {
                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithOne("Cliente")
                        .HasForeignKey("Greenlight.Entitys.Cliente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.Endereco", b =>
                {
                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithMany("Endereco")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.Energia", b =>
                {
                    b.HasOne("Greenlight.Entitys.Concessionaria", "Concessionaria")
                        .WithMany("Energia")
                        .HasForeignKey("ConcessionariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.Endereco", "Endereco")
                        .WithMany("Energia")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.EnergiaStatus", "EnergiaStatus")
                        .WithMany("Energia")
                        .HasForeignKey("EnergiaStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithMany("Energia")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concessionaria");

                    b.Navigation("Endereco");

                    b.Navigation("EnergiaStatus");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.Pessoa", b =>
                {
                    b.HasOne("Greenlight.Entitys.Associacao", "Associacao")
                        .WithMany("Pessoas")
                        .HasForeignKey("AssociacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associacao");
                });

            modelBuilder.Entity("Greenlight.Entitys.PessoaFisica", b =>
                {
                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithOne("PessoaFisica")
                        .HasForeignKey("Greenlight.Entitys.PessoaFisica", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.PessoaJuridica", b =>
                {
                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithOne("PessoaJuridica")
                        .HasForeignKey("Greenlight.Entitys.PessoaJuridica", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Greenlight.Entitys.Transacoes", b =>
                {
                    b.HasOne("Greenlight.Entitys.Associacao", "Associacao")
                        .WithMany("Transacoes")
                        .HasForeignKey("AssociacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.Energia", "Energia")
                        .WithMany("Transacoes")
                        .HasForeignKey("EnergiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.Pessoa", "Pessoa")
                        .WithMany("Transacoes")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenlight.Entitys.TipoTransacao", "TipoTransacao")
                        .WithMany("Transacoes")
                        .HasForeignKey("TipoTransacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associacao");

                    b.Navigation("Energia");

                    b.Navigation("Pessoa");

                    b.Navigation("TipoTransacao");
                });

            modelBuilder.Entity("Greenlight.Entitys.Associacao", b =>
                {
                    b.Navigation("Anuncios");

                    b.Navigation("Pessoas");

                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("Greenlight.Entitys.Concessionaria", b =>
                {
                    b.Navigation("Energia");
                });

            modelBuilder.Entity("Greenlight.Entitys.Endereco", b =>
                {
                    b.Navigation("Energia");
                });

            modelBuilder.Entity("Greenlight.Entitys.Energia", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("Greenlight.Entitys.EnergiaStatus", b =>
                {
                    b.Navigation("Energia");
                });

            modelBuilder.Entity("Greenlight.Entitys.Pessoa", b =>
                {
                    b.Navigation("Anuncios");

                    b.Navigation("Cliente");

                    b.Navigation("Endereco");

                    b.Navigation("Energia");

                    b.Navigation("PessoaFisica");

                    b.Navigation("PessoaJuridica");

                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("Greenlight.Entitys.TipoTransacao", b =>
                {
                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
